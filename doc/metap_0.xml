<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE logtalk SYSTEM "logtalk.dtd">
<?xml-stylesheet type="text/xsl" href="lgtxml.xsl"?>
<logtalk>
<entity>
<name><![CDATA[metap]]></name>
<type>protocol</type>
<compilation>static, context_switching_calls</compilation>
<comment><![CDATA[Useful meta-predicates protocol.]]></comment>
<author><![CDATA[Paulo Moura]]></author>
<version>5.0</version>
<date>2011/1/18</date>
</entity>
<relations>
</relations>
<predicates>
<public>
<predicate>
<name><![CDATA[include/3]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[include(1,*,*)]]></meta>
<mode>
<template><![CDATA[include(+callable,+list,-list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Returns a list of all list elements that satisfy a predicate.]]></comment>
<template><![CDATA[include(Closure,List,Included)]]></template>
</predicate>
<predicate>
<name><![CDATA[exclude/3]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[exclude(1,*,*)]]></meta>
<mode>
<template><![CDATA[exclude(+callable,+list,-list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Returns a list of all list elements that fail to satisfy a predicate.]]></comment>
<template><![CDATA[exclude(Closure,List,Excluded)]]></template>
</predicate>
<predicate>
<name><![CDATA[findall_member/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[findall_member(*,*,0,*)]]></meta>
<mode>
<template><![CDATA[findall_member(@term,+list,@callable,-list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Finds all members of a list that satisfy a given test.]]></comment>
<template><![CDATA[findall_member(Member,List,Test,Result)]]></template>
</predicate>
<predicate>
<name><![CDATA[findall_member/5]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[findall_member(*,*,0,*,*)]]></meta>
<mode>
<template><![CDATA[findall_member(@term,+list,@callable,-list,+list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Finds all members of a list that satisfy a given test appending the given tail to the result.]]></comment>
<template><![CDATA[findall_member(Member,List,Test,Result,Tail)]]></template>
</predicate>
<predicate>
<name><![CDATA[partition/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[partition(1,*,*,*)]]></meta>
<mode>
<template><![CDATA[partition(+callable,+list,-list,-list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Partition a list of elements in two lists using a predicate.]]></comment>
<template><![CDATA[partition(Closure,List,Included,Excluded)]]></template>
</predicate>
<predicate>
<name><![CDATA[partition/6]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[partition(3,*,*,*,*,*)]]></meta>
<mode>
<template><![CDATA[partition(+callable,+list,@term,-list,-list,-list)]]></template>
<solutions>one</solutions>
</mode>
<comment><![CDATA[Partitions a list in lists with values less, equal, and greater than a given value using a comparison predicate with the same argument order as compare/3.]]></comment>
<template><![CDATA[partition(Closure,List,Value,Less,Equal,Greater)]]></template>
</predicate>
<predicate>
<name><![CDATA[fold_left/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[fold_left(3,*,*,*)]]></meta>
<mode>
<template><![CDATA[fold_left(+callable,?term,+list,?term)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List folding (left associative).]]></comment>
<template><![CDATA[fold_left(Closure,Accumulator,List,Result)]]></template>
</predicate>
<predicate>
<name><![CDATA[scan_left/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[scan_left(3,*,*,*)]]></meta>
<mode>
<template><![CDATA[scan_left(+callable,?term,+list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List scanning; similar to folding but returns the intermediate and final results (left associative).]]></comment>
<template><![CDATA[scan_left(Closure,Accumulator,List,Results)]]></template>
</predicate>
<predicate>
<name><![CDATA[fold_right/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[fold_right(3,*,*,*)]]></meta>
<mode>
<template><![CDATA[fold_right(+callable,?term,+list,?term)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List folding (right associative).]]></comment>
<template><![CDATA[fold_right(Closure,Accumulator,List,Result)]]></template>
</predicate>
<predicate>
<name><![CDATA[scan_right/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[scan_right(3,*,*,*)]]></meta>
<mode>
<template><![CDATA[scan_right(+callable,?term,+list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List scanning; similar to folding but returns the intermediate and final results (right associative).]]></comment>
<template><![CDATA[scan_right(Closure,Accumulator,List,Results)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/2]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(1,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[True if the predicate succeeds for each list element.]]></comment>
<template><![CDATA[map(Closure,List)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/3]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(2,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from two lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/4]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(3,*,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from three lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2,List3)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/5]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(4,*,*,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from four lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2,List3,List4)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/6]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(5,*,*,*,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list,?list,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from five lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2,List3,List4,List5)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/7]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(6,*,*,*,*,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list,?list,?list,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from six lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2,List3,List4,List5,List6)]]></template>
</predicate>
<predicate>
<name><![CDATA[map/8]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map(7,*,*,*,*,*,*,*)]]></meta>
<mode>
<template><![CDATA[map(+callable,?list,?list,?list,?list,?list,?list,?list)]]></template>
<solutions>zero_or_more</solutions>
</mode>
<comment><![CDATA[List mapping predicate taken arguments from seven lists of elements.]]></comment>
<template><![CDATA[map(Closure,List1,List2,List3,List4,List5,List6,List7)]]></template>
</predicate>
<predicate>
<name><![CDATA[map_reduce/5]]></name>
<scope>public</scope>
<compilation>static</compilation>
<meta><![CDATA[map_reduce(2,3,*,*,*)]]></meta>
<mode>
<template><![CDATA[map_reduce(+callable,+callable,+term,?list,?term)]]></template>
<solutions>zero_or_more</solutions>
</mode>
</predicate>
</public>
<protected>
</protected>
<private>
</private>
</predicates>
<operators>
</operators>
<remarks>
</remarks>
</logtalk>
